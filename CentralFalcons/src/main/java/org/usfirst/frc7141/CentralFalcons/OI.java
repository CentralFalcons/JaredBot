// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc7141.CentralFalcons;

import org.usfirst.frc7141.CentralFalcons.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc7141.CentralFalcons.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton rightStick;
    public JoystickButton leftStick;
    public JoystickButton rightTrigger;
    public JoystickButton leftTrigger;
    public JoystickButton rightBumper;
    public JoystickButton leftBumper;
    public JoystickButton y;
    public JoystickButton b;
    public JoystickButton x;
    public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(0);
        
        x = new JoystickButton(joystick, 1);
        x.whileHeld(new Eject());
        b = new JoystickButton(joystick, 1);
        b.whileHeld(new RetractSlide());
        y = new JoystickButton(joystick, 1);
        y.whileHeld(new DeploySlide());
        leftBumper = new JoystickButton(joystick, 1);
        leftBumper.whileHeld(new SetSpeedLeft(0));
        rightBumper = new JoystickButton(joystick, 1);
        rightBumper.whileHeld(new SetSpeedRight(0));
        leftTrigger = new JoystickButton(joystick, 1);
        leftTrigger.whileHeld(new SetSpeedLeft(0));
        rightTrigger = new JoystickButton(joystick, 1);
        rightTrigger.whileHeld(new SetSpeedRight(0));
        leftStick = new JoystickButton(joystick, 1);
        leftStick.whileHeld(new SetSpeedLeft(0));
        rightStick = new JoystickButton(joystick, 1);
        rightStick.whileHeld(new SetSpeedRight(0));


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DeploySlide", new DeploySlide());
        SmartDashboard.putData("RetractSlide", new RetractSlide());
        SmartDashboard.putData("Eject", new Eject());
        SmartDashboard.putData("SetSpeedRight", new SetSpeedRight());
        SmartDashboard.putData("SetSpeedLeft", new SetSpeedLeft());
        SmartDashboard.putData("CompressorOperation", new CompressorOperation());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

